{
    "swagger": "2.0",
    "info": {
        "description": "TurnOnline.biz Ecosystem Account & Resources ownership management",
        "version": "1.0",
        "title": "Account Steward"
    },
    "host": "${env.ENDPOINTS_SERVICE_NAME}",
    "basePath": "/api/steward",
    "tags": [
        {
            "name": "Account Management"
        },
        {
            "name": "Account Domains"
        },
        {
            "name": "Deputy Accounts"
        },
        {
            "name": "Address Book"
        },
        {
            "name": "Configuration"
        },
        {
            "name": "Code-books"
        }
    ],
    "schemes": [
        "https"
    ],
    "paths": {
        "/v1/accounts": {
            "get": {
                "tags": [
                    "Account Management"
                ],
                "summary": "Accounts search",
                "description": "Retrieve accounts filtered with given criteria. This API is available for super admin only (the user with specific API Key generated in cloud console).",
                "operationId": "getAccounts",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the first result to retrieve, numbered from 0",
                        "default": 0
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of results to retrieve",
                        "default": 10
                    },
                    {
                        "name": "company",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "The boolean indicating whether result should contain certain type of accounts (personal/business) or not. The missing value means do not filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of accounts matching given criteria",
                        "schema": {
                            "$ref": "#/definitions/AccountCollection"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Account Management"
                ],
                "summary": "A new account sign up",
                "description": "Creates a new account in the account management system. It represents a sign up of the user account.",
                "operationId": "createAccount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Newly created and updated account",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            }
        },
        "/v1/accounts/{login_id}": {
            "get": {
                "tags": [
                    "Account Management"
                ],
                "summary": "Return the account",
                "description": "Returns the account for the given ID.",
                "operationId": "getAccount",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Account response for given ID",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve an account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Account Management"
                ],
                "summary": "Update the account",
                "description": "Updates the account. Servise supports patch semantics. Only those properties will be updated that are part of the request, rest will be untouched (excluding ones are processed in backend async).",
                "operationId": "updateAccount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The successfully updated account",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to update an account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Account Management"
                ],
                "summary": "Delete the account",
                "description": "Deletes the account with the supplied ID from the account management system and its all related data.",
                "operationId": "deleteAccount",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The confirmation, the account has been enqueued to be deleted asynchronously."
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to delete an account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                }
            ]
        },
        "/v1/accounts/{login_id}/accounts/{account_id}/contacts": {
            "put": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Adds account into address book",
                "description": "Adds the specified account in to address book of the authenticated account as a contact card. If the contact already exist it will be updated.\n\nOnly the account that represents a business account is allowed to be added. Otherwise a bad request will be thrown.",
                "operationId": "accountToAddressBook",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The successfully either created or updated contact.",
                        "schema": {
                            "$ref": "#/definitions/ContactCard"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to update a resource that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                },
                {
                    "name": "account_id",
                    "in": "path",
                    "required": true,
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the account to be either added or updated as a contact in address book."
                }
            ]
        },
        "/v1/accounts/{login_id}/contacts": {
            "get": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Contacts search",
                "description": "Searches for the contacts in account's address book identified with account ID with given filter criteria.",
                "operationId": "getContacts",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the first result to retrieve, numbered from 0",
                        "default": 0
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of results to retrieve",
                        "default": 10
                    },
                    {
                        "name": "company",
                        "in": "query",
                        "required": false,
                        "type": "boolean",
                        "description": "The boolean indicating whether result should contain certain type of contacts (personal/business) or not. The missing value means do not filter."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of contacts matching given criteria",
                        "schema": {
                            "$ref": "#/definitions/ContactCardCollection"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to work with an account that doesn’t exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Create a new contact",
                "description": "Creates a new contact in account's address book identified with account ID. Duplicates are allowed.",
                "operationId": "createContact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactCard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Newly created and updated contact",
                        "schema": {
                            "$ref": "#/definitions/ContactCard"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to work with an account that doesn’t exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                }
            ]
        },
        "/v1/accounts/{login_id}/contacts/{contact_id}": {
            "get": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Return the contact",
                "description": "Returns a single contact based on the supplied ID or contact email.",
                "operationId": "getContact",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Contact response for given ID or contact email.",
                        "schema": {
                            "$ref": "#/definitions/ContactCard"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve a resource that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Update the contact",
                "description": "Updates the contact. Servise supports patch semantics. Only those properties will be updated that are part of the request, rest will be untouched.",
                "operationId": "updateContact",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ContactCard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The successfully updated contact",
                        "schema": {
                            "$ref": "#/definitions/ContactCard"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to update a resource that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Delete the contact",
                "description": "Deletes a single contact based on the supplied ID or contact email.",
                "operationId": "deleteContact",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The confirmation, the contact has been deleted."
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to delete a resource that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                },
                {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The ID or contact email of the contact to work with."
                }
            ]
        },
        "/v1/accounts/{login_id}/contacts/{contact_id}/newsletter": {
            "put": {
                "tags": [
                    "Address Book"
                ],
                "summary": "Subscribe / unsubscribe",
                "description": "Subscribes or unsubscribes identified contact to / from the newsletter.",
                "operationId": "updateNewsletterSubscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewsletterSubscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Confirmation of the newsletter subscription request has been processed.",
                        "schema": {
                            "$ref": "#/definitions/NewsletterResponse"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn’t understand or missing a mandatory properties. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to work with an account that doesn’t exist or requested contact has not found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                },
                {
                    "name": "contact_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The ID or contact email as a contact identification to manage subscription."
                }
            ]
        },
        "/v1/accounts/{login_id}/domains": {
            "get": {
                "tags": [
                    "Account Domains"
                ],
                "summary": "List account domains",
                "description": "Searches for a domains associated with authenticated account.",
                "operationId": "listDomains",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the first result to retrieve, numbered from 0",
                        "default": 0
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of results to retrieve",
                        "default": 10
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "The type of the domain to get in the result. It’s case insensitive.",
                        "enum": [
                            "naked",
                            "subdomain",
                            "product"
                        ],
                        "x-example": "naked"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The filtered list of domains owned by the authenticated account.",
                        "schema": {
                            "$ref": "#/definitions/DomainCollection"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve a domain records of an account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Account Domains"
                ],
                "summary": "Create a new domain",
                "description": "The domain must be unique otherwise validation will fail with bad request response.\n\n**Note:** in case the client will provide these properties “domain”, “subdomain”, and “uri” 3 domain records will be created; NAKED, SUBDOMAIN and PRODUCT.",
                "operationId": "insertDomain",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Domain"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Newly created array of domains where number of domains depends on the current status and domain properties. At once up to three domains might be created.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Domain"
                            }
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand or validation has failed. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to create a domain record for the account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                }
            ]
        },
        "/v1/accounts/{login_id}/domains/{hostname}/uri": {
            "post": {
                "tags": [
                    "Account Domains"
                ],
                "summary": "Add new domain URI",
                "description": "Creates a new domain that will be created based on the provided URI for single hostname (for example www.turnonline.biz - domain name and sub-domain).",
                "operationId": "addNewDomainUri",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "vnd.turnon.cloud.always-create-uri",
                        "in": "header",
                        "required": false,
                        "type": "boolean",
                        "description": "The parameter to tell the service whether to create a new domain record even the given URI already exist. For that case the URI will be appended by a postfix to make the URL unique."
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Uri"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created domain.",
                        "schema": {
                            "$ref": "#/definitions/Domain"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to add a new URI for domain of the account that doesn't exist or hostname is not found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                },
                {
                    "name": "hostname",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The domain name unique across the globe. As composition of the optional sub-domain, domain, and TLD.",
                    "x-example": "turnonline.biz"
                }
            ]
        },
        "/v1/accounts/{login_id}/domains/{name}": {
            "get": {
                "tags": [
                    "Account Domains"
                ],
                "summary": "Return the domain",
                "operationId": "getDomain",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Status 200",
                        "schema": {
                            "$ref": "#/definitions/Domain"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve a domain record of the account that doesn't exist or host is not found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Account Domains"
                ],
                "summary": "Delete the domain",
                "operationId": "deleteDomain",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The confirmation, the domain has been deleted."
                    },
                    "400": {
                        "description": "Whether the domain deletion is being allowed, first must be validated. If validation fails, the reason will be part of the error message.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to delete a domain record of the account that doesn't exist or host is not found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                },
                {
                    "name": "name",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The domain name assembled by the service as a composition of the optional sub-domain, domain, TLD, and the product path (URI). Encoded.",
                    "x-example": "turnonline.biz/smart-watch-steel"
                }
            ]
        },
        "/v1/accounts/{login_id}/invoicing": {
            "get": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Return the invoicing",
                "operationId": "getInvoicingConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The invoicing rules associated with the account.",
                        "schema": {
                            "$ref": "#/definitions/InvoicingConfig"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve an invoicing rules of the account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Update the invoicing",
                "operationId": "updateInvoicingConfig",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InvoicingConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The successfully updated invoicing rules.",
                        "schema": {
                            "$ref": "#/definitions/InvoicingConfig"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to update an invoicing rules of the account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Delete the invoicing",
                "operationId": "deleteInvoicingConfig",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The confirmation, the invoicing rules has been deleted."
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to delete invoicing rules of the account that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                }
            ]
        },
        "/v1/accounts/{login_id}/subs": {
            "get": {
                "tags": [
                    "Deputy Accounts"
                ],
                "summary": "Deputy account list retrieval",
                "description": "Retrieve deputy accounts filtered with given criteria that belongs to the parent account.",
                "operationId": "getDeputyAccounts",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The position of the first result to retrieve, numbered from 0",
                        "default": 0
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of results to retrieve",
                        "default": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of deputy accounts matching given criteria.",
                        "schema": {
                            "$ref": "#/definitions/DeputyAccountCollection"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve a deputy account but main account for given login email doesn’t exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Deputy Accounts"
                ],
                "summary": "Create a deputy account",
                "description": "Creates a new deputy account to be associated to the parent account. User can sign in with this newly created Deputy account and work as with the main account however account will behave based on the role.",
                "operationId": "createDeputyAccount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeputyAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The full main account that represents just created deputy account.",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to create a deputy account but main account for given login email doesn’t exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                }
            ]
        },
        "/v1/accounts/{login_id}/subs/{deputy_email}": {
            "get": {
                "tags": [
                    "Deputy Accounts"
                ],
                "summary": "Return the deputy account",
                "description": "Returns the deputy account identified by the main account and deputy email.",
                "operationId": "getDeputyAccount",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Deputy account response for given main account email and deputy email.",
                        "schema": {
                            "$ref": "#/definitions/DeputyAccount"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve a deputy account but main account for given login email or target Deputy account doesn’t exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Deputy Accounts"
                ],
                "summary": "Update the deputy account",
                "operationId": "updateDeputyAccount",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeputyAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The full main account that represents updated deputy account.",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "The error indicates that client has made a request that server couldn't understand. The client should not repeat the request without modifications.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to update a deputy account but main account for given login email or target Deputy account doesn’t exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It’s a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Deputy Accounts"
                ],
                "summary": "Delete the deputy account",
                "operationId": "deleteDeputyAccount",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The confirmation, the deputy account has been deleted."
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to delete a deputy account but main account for given login email or target deputy account doesn’t exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It’s a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "login_id",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The TurnOnline.biz Ecosystem account unique ID, Identity ID (id within login provider) or email as an identification of the main account to work with.",
                    "x-example": "Wdl98aO0lhgB6gOogt7bvOjPZ"
                },
                {
                    "name": "deputy_email",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The email as an identification of the deputy account."
                }
            ]
        },
        "/v1/codebook/countries": {
            "get": {
                "tags": [
                    "Code-books"
                ],
                "summary": "Returns the list of countries",
                "description": "Returns the list of countries filtered with locale and version.",
                "operationId": "getCountries",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "The codebook items version the client has configured to prefer in results. If requested version is not found the last (most current) one will be applied. No version parameter means the most current will be returned."
                    },
                    {
                        "name": "Accept-Language",
                        "in": "header",
                        "required": false,
                        "type": "string",
                        "description": "The language the client has configured to prefer in results. If requested language is not supported (or not provided at all) will fallback to the default account language."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of countries matching given criteria",
                        "schema": {
                            "$ref": "#/definitions/CountryCollection"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            }
        },
        "/v1/codebook/countries/{code}": {
            "get": {
                "tags": [
                    "Code-books"
                ],
                "summary": "Returns single country",
                "operationId": "getCountry",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "The codebook item version the client has configured to prefer in results. If requested version is not found the last (most current) one will be applied. No version parameter means the most current will be returned."
                    },
                    {
                        "name": "Accept-Language",
                        "in": "header",
                        "required": false,
                        "type": "string",
                        "description": "The language the client has configured to prefer in results. If requested language is not supported (or not provided at all) will fallback to the default account language."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Country item for given code",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve a resource that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "code",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The code of the country to be returned"
                }
            ]
        },
        "/v1/codebook/legalforms": {
            "get": {
                "tags": [
                    "Code-books"
                ],
                "summary": "Returns the list of legal forms",
                "description": "Returns the list of legal forms filtered with locale and version.",
                "operationId": "getLegalForms",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "The codebook items version the client has configured to prefer in results. If requested version is not found the last (most current) one will be applied. No version parameter means the most current will be returned."
                    },
                    {
                        "name": "Accept-Language",
                        "in": "header",
                        "required": false,
                        "type": "string",
                        "description": "The language the client has configured to prefer in results. If requested language is not supported (or not provided at all) will fallback to the default account language."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of legal forms matching given criteria",
                        "schema": {
                            "$ref": "#/definitions/LegalFormCollection"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            }
        },
        "/v1/codebook/legalforms/{code}": {
            "get": {
                "tags": [
                    "Code-books"
                ],
                "summary": "Returns the legal form item",
                "operationId": "getLegalForm",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "version",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "The codebook item version the client has configured to prefer in results. If requested version is not found the last (most current) one will be applied. No version parameter means the most current will be returned."
                    },
                    {
                        "name": "Accept-Language",
                        "in": "header",
                        "required": false,
                        "type": "string",
                        "description": "The language the client has configured to prefer in results. If requested language is not supported (or not provided at all) will fallback to the default account language."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Legal form item for given code",
                        "schema": {
                            "$ref": "#/definitions/LegalForm"
                        }
                    },
                    "401": {
                        "description": "The error when the authentication credential fails.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "The error when client tries to retrieve a resource that doesn't exist.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "It's a failure of the server. The client can repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "503": {
                        "description": "The service is unavailable or the server has timed out processing of the request. The client may repeat the request without modifications at any later time.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [
                    {
                        "firebase-a9a2a51a": []
                    }
                ]
            },
            "parameters": [
                {
                    "name": "code",
                    "in": "path",
                    "required": true,
                    "type": "string",
                    "description": "The code of the legal form to be returned"
                }
            ]
        }
    },
    "securityDefinitions": {
        "firebase-a9a2a51a": {
            "type": "oauth2",
            "authorizationUrl": "",
            "flow": "implicit",
            "x-google-issuer": "https://securetoken.google.com/${env.TOKEN_ISSUER}",
            "x-google-jwks_uri": "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com",
            "x-google-audiences": "${env.TOKEN_ISSUER}"
        }
    },
    "definitions": {
        "Account": {
            "type": "object",
            "properties": {
                "audience": {
                    "type": "string",
                    "description": "The Seller audience unique identification.\n\nUsers of Seller's audience are separated from each other. The user identified by login email address within one audience is a different user within another audience even with the same login email. Those users have different Account.IDs.\n\nTaken from the JWT token, encoded as 'aud'.\n\nHowever, there is a one exception. A business (SELLER) account can support more than one customer project (for example Google Cloud Project, Firebase) for the same account where single customer project is represented by an audience. See 'supportedAudiences' property."
                },
                "business": {
                    "description": "The business account details. If the property \"company\" is false, the posted values will be stored anyway for further use, however account is still being considered as a personal account.",
                    "$ref": "#/definitions/AccountBusiness"
                },
                "company": {
                    "type": "boolean",
                    "description": "The boolean indicating whether this account represents a business account. The missing value or false means it's a personal account.",
                    "default": false
                },
                "contactEmail": {
                    "type": "string",
                    "description": "The email address considered as a contact email used for notification purposes related to this account. Supports comma separated list. If it's not provided the account's email will be used by default."
                },
                "email": {
                    "type": "string",
                    "description": "The login email address as the account unique identification, taken from the login provider as an authenticated email."
                },
                "firstName": {
                    "type": "string",
                    "description": "The personal / deputy account, person first name."
                },
                "hasPostalAddress": {
                    "type": "boolean",
                    "description": "If true, the postal address is not same as the company address and must be provided.",
                    "default": false
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The account unique identification"
                },
                "identityId": {
                    "type": "string",
                    "description": "The email account unique identification within third-party provider system. Taken from the login provider."
                },
                "invoicing": {
                    "description": "The set of default invoicing rules. Valid only for an account representing a business account (configured by \"company\" property).",
                    "$ref": "#/definitions/InvoicingConfig"
                },
                "lastName": {
                    "type": "string",
                    "description": "The personal / deputy account, person last name."
                },
                "locale": {
                    "type": "string",
                    "description": "The preferred account language. ISO 639 alpha-2 or alpha-3 language code."
                },
                "middleName": {
                    "type": "string",
                    "description": "The personal / deputy account, person middle name."
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time of the last modification of entity values. Populated by the service."
                },
                "personalAddress": {
                    "description": "The personal account address details.",
                    "$ref": "#/definitions/AccountPersonalAddress"
                },
                "postalAddress": {
                    "description": "The postal address details. The address is being ignored until property \"hasPostalAddress\" is set to true.",
                    "$ref": "#/definitions/AccountPostalAddress"
                },
                "prefix": {
                    "type": "string",
                    "description": "The personal / deputy account, person name prefix."
                },
                "publicContact": {
                    "description": "The public contact of the account, might be publicly available.",
                    "$ref": "#/definitions/AccountPublicContact"
                },
                "role": {
                    "type": "string",
                    "description": "The account role",
                    "default": "STANDARD",
                    "enum": [
                        "STANDARD",
                        "SELLER"
                    ]
                },
                "suffix": {
                    "type": "string",
                    "description": "The personal / deputy account, person name suffix."
                },
                "supportedAudiences": {
                    "type": "array",
                    "description": "A business (SELLER) account can support more than one audience for the same account. This is the list of supported audiences incl. the main audience.",
                    "items": {
                        "type": "string"
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "A time-zone ID, such as Europe/Paris. Used to identify the rules how to render date time properties of the resources associated with this account. \n\nIt's a case sensitive. The default set of data is supplied by the IANA Time Zone Database (TZDB).\nThis has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.\nIf zone ID has an invalid format or cannot be found a bad request will be thrown."
                }
            },
            "description": "The TurnOnline.biz Ecosystem account."
        },
        "AccountBusiness": {
            "type": "object",
            "properties": {
                "businessName": {
                    "type": "string",
                    "description": "The company business name. It's mandatory for business account sign-up."
                },
                "city": {
                    "type": "string",
                    "description": "The company domicile city."
                },
                "companyId": {
                    "type": "string",
                    "description": "The company business identification number."
                },
                "domain": {
                    "description": "The account default domain. It might be selected only from existing list of domains and it must be a NAKED domain or SUBDOMAIN, otherwise validation error will be thrown.\n\nIn order to set an account default domain (POST), provide a domain unique name from an existing list (Domain.name property).",
                    "$ref": "#/definitions/Domain"
                },
                "domicile": {
                    "type": "string",
                    "description": "The country of residence of the company, ISO 3166 alpha-2 country code. It's case insensitive. Technically it's same as country but the supported list is limited.\n\nIf the account represents a STANDARD one, the country list is not limited. The effective check would be performed in case, the account is supposed to be converted to SELLER one.\n\n It's mandatory for business account sign-up."
                },
                "latitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The company address latitude geographic coordinate, generated by the service."
                },
                "legalForm": {
                    "type": "string",
                    "description": "The company legal form. It's case insensitive.",
                    "default": "ltd"
                },
                "logo": {
                    "description": "The company logo.",
                    "$ref": "#/definitions/Image"
                },
                "longitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The company address longitude geographic coordinate, generated by the service."
                },
                "postcode": {
                    "type": "string",
                    "description": "The company postal code."
                },
                "street": {
                    "type": "string",
                    "description": "The company street and street number."
                },
                "taxId": {
                    "type": "string",
                    "description": "The company tax payer identification number."
                },
                "vatId": {
                    "type": "string",
                    "description": "The company value added tax identification number (VAT ID). Mandatory if vatPayer property is true."
                },
                "vatPayer": {
                    "type": "boolean",
                    "description": "The boolean indication whether company is registered as VAT payer. The missing value or false means company it's not a VAT payer.",
                    "default": false
                }
            }
        },
        "AccountCollection": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Account"
                    }
                }
            }
        },
        "AccountPersonalAddress": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "description": "The personal address city."
                },
                "country": {
                    "type": "string",
                    "description": "The personal address ISO 3166 alpha-2 country code. It’s case insensitive."
                },
                "latitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The personal address latitude geographic coordinate, generated by the service."
                },
                "longitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The personal address longitude geographic coordinate, generated by the service."
                },
                "postcode": {
                    "type": "string",
                    "description": "The personal address post code."
                },
                "street": {
                    "type": "string",
                    "description": "The personal street and street number"
                }
            }
        },
        "AccountPostalAddress": {
            "type": "object",
            "properties": {
                "businessName": {
                    "type": "string",
                    "description": "The postal business name."
                },
                "city": {
                    "type": "string",
                    "description": "The postal address city."
                },
                "country": {
                    "type": "string",
                    "description": "The postal address ISO 3166 alpha-2 country code. It's case insensitive."
                },
                "firstName": {
                    "type": "string",
                    "description": "The postal address first name."
                },
                "lastName": {
                    "type": "string",
                    "description": "The postal address last name."
                },
                "latitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The postal address latitude geographic coordinate, generated by the service."
                },
                "longitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The postal address longitude geographic coordinate, generated by the service."
                },
                "postcode": {
                    "type": "string",
                    "description": "The postal address post code."
                },
                "prefix": {
                    "type": "string",
                    "description": "The postal address name prefix."
                },
                "street": {
                    "type": "string",
                    "description": "The postal address street and street number."
                },
                "suffix": {
                    "type": "string",
                    "description": "The postal address name suffix."
                }
            }
        },
        "AccountPublicContact": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The public contact email address."
                },
                "name": {
                    "type": "string",
                    "description": "The public contact person name."
                },
                "phone": {
                    "type": "string",
                    "description": "The public contact phone number."
                },
                "website": {
                    "type": "string",
                    "description": "The account website."
                }
            }
        },
        "ContactCard": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The account unique identification within TurnOnline.biz Ecosystem."
                },
                "businessName": {
                    "type": "string",
                    "description": "The company business name."
                },
                "ccEmail": {
                    "type": "string",
                    "description": "The contact email if defined, it will be used for notification purposes that will be used as 'CC' to copy email. Supports comma separated list."
                },
                "city": {
                    "type": "string",
                    "description": "The city."
                },
                "company": {
                    "type": "boolean",
                    "description": "The boolean indication whether contact represents a business entity. The missing value or false means it represents a personal contact (not business entity).",
                    "default": false
                },
                "companyId": {
                    "type": "string",
                    "description": "The company business identification number."
                },
                "contactEmail": {
                    "type": "string",
                    "description": "The contact email used either for notification purposes or for dealing with a potential issues with order. Supports comma separated list."
                },
                "contactPhone": {
                    "type": "string",
                    "description": "The contact phone number used for dealing with potential issues with an order."
                },
                "country": {
                    "type": "string",
                    "description": "The contact ISO 3166 alpha-2 country code. It's case insensitive."
                },
                "firstName": {
                    "type": "string",
                    "description": "The personal first name."
                },
                "hasPostalAddress": {
                    "type": "boolean",
                    "description": "If true, the postal address is not same as the company/personal address and must be provided.",
                    "default": false
                },
                "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The contact unique identification."
                },
                "lastName": {
                    "type": "string",
                    "description": "The personal last name."
                },
                "latitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The contact address latitude geographic coordinate, generated by the service."
                },
                "locale": {
                    "type": "string",
                    "description": "The preferred language of the issued invoice. If supported, the value will override the seller's account default language. ISO 639 alpha-2 or alpha-3 language code."
                },
                "logo": {
                    "description": "The company logo.",
                    "$ref": "#/definitions/Image"
                },
                "longitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The contact address longitude geographic coordinate, generated by the service."
                },
                "middleName": {
                    "type": "string",
                    "description": "The personal middle name."
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time of the last modification of entity values. Populated by the service."
                },
                "newsletter": {
                    "type": "boolean",
                    "description": "The indication whether this contact has given a consent to be subscribed to the seller's newsletter.",
                    "default": false
                },
                "numberOfDays": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of days for calculation of the invoice due date for this specific contact."
                },
                "postalAddress": {
                    "description": "The postal address details.",
                    "$ref": "#/definitions/ContactCardPostalAddress"
                },
                "postcode": {
                    "type": "string",
                    "description": "The post code."
                },
                "prefix": {
                    "type": "string",
                    "description": "The personal name prefix."
                },
                "street": {
                    "type": "string",
                    "description": "The street and street number."
                },
                "suffix": {
                    "type": "string",
                    "description": "The personal name suffix."
                },
                "taxId": {
                    "type": "string",
                    "description": "The tax payer identification number of the company."
                },
                "vatId": {
                    "type": "string",
                    "description": "The value added tax identification number (VAT ID) of the company. Provided if vatPayer property is true."
                },
                "vatPayer": {
                    "type": "boolean",
                    "description": "The boolean indication whether company is registered as VAT payer. The missing value or false means company it's not a VAT payer.",
                    "default": false
                }
            },
            "description": "The contact that represents a business partner (customer). At least one of the value must be provided; either businessName or lastName."
        },
        "ContactCardCollection": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Contact card collection wrapper.",
                    "items": {
                        "$ref": "#/definitions/ContactCard"
                    }
                }
            }
        },
        "ContactCardPostalAddress": {
            "type": "object",
            "properties": {
                "businessName": {
                    "type": "string",
                    "description": "The postal address business name."
                },
                "city": {
                    "type": "string",
                    "description": "The postal address city."
                },
                "country": {
                    "type": "string",
                    "description": "The postal address ISO 3166 alpha-2 country code. It's case insensitive."
                },
                "firstName": {
                    "type": "string",
                    "description": "The postal address first name."
                },
                "lastName": {
                    "type": "string",
                    "description": "The postal address last name."
                },
                "latitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The postal address latitude geographic coordinate, generated by the service."
                },
                "longitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The postal address longitude geographic coordinate, generated by the service."
                },
                "middleName": {
                    "type": "string",
                    "description": "The postal address middle name."
                },
                "postcode": {
                    "type": "string",
                    "description": "The postal address post code."
                },
                "prefix": {
                    "type": "string",
                    "description": "The postal address name prefix."
                },
                "street": {
                    "type": "string",
                    "description": "The postal address street and street number."
                },
                "suffix": {
                    "type": "string",
                    "description": "The postal address name suffix."
                }
            }
        },
        "Country": {
            "type": "object",
            "required": [
                "code",
                "label",
                "locale"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The ISO 3166 alpha-2 country code."
                },
                "label": {
                    "type": "string",
                    "description": "The codebook value, country name."
                },
                "locale": {
                    "type": "string",
                    "description": "The label language. ISO 639 alpha-2 or alpha-3 language code."
                },
                "version": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The codebook item version."
                }
            },
            "description": "The country code-book definition. The list of ISO 3166 alpha-2 country codes with associated country names for each of the supported language.\nhttps://datahub.io/core/country-list"
        },
        "CountryCollection": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Country collection wrapper.",
                    "items": {
                        "$ref": "#/definitions/Country"
                    }
                }
            }
        },
        "Domain": {
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The domain unique across the globe. As a composition of the domain name and TLD. It will always be saved in lowercase letters. In case the domain property is being provided together with subdomain (can be provided even as an URL), only the naked domain part will be accepted for this property."
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time of the last modification of entity values. Populated by the service."
                },
                "name": {
                    "type": "string",
                    "description": "The name that represents an unique domain specification. Only this is the value required to be present. The rest of the domain properties will be populated by the service."
                },
                "subdomain": {
                    "type": "string",
                    "description": "The optional sub-domain. If missing, this Domain represents a naked domain. It will always be saved in lowercase letters."
                },
                "uri": {
                    "type": "string",
                    "description": "The optional path of a product (slash \"/\" prefix will be ignored). It will always be saved in lowercase letters."
                },
                "url": {
                    "type": "string",
                    "description": "The final URL, rendered by the service."
                },
                "verified": {
                    "type": "boolean",
                    "description": "The boolean indicating whether this domain has the verified ownership.",
                    "default": false
                }
            },
            "description": "The domain as a representation where a certain product will be publicly available. As a first step a validated (ownership) domain must be created (naked domain) as a parent to the all of the sub-domains and product domains.\n\n**There are 3 types of domains:**\n* NAKED - only the client defined property “domain” has a value as a composition of the domain name and TLD.\n* SUBDOMAIN - additonally “subdomain” is being defined along side with “domain” property.\n* PRODUCT - these client defined properties “domain”, “subdomain”, and “uri” represents a certain product that is publicly available as a web site.\n"
        },
        "DomainCollection": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Domain collection wrapper.",
                    "items": {
                        "$ref": "#/definitions/Domain"
                    }
                }
            }
        },
        "Error": {
            "type": "object",
            "required": [
                "error"
            ],
            "properties": {
                "error": {
                    "description": "Error body wrapper.",
                    "$ref": "#/definitions/ErrorBody"
                }
            }
        },
        "ErrorBody": {
            "type": "object",
            "required": [
                "code",
                "errors",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The HTTP status code."
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ErrorReason"
                    }
                },
                "message": {
                    "type": "string",
                    "description": "The error message."
                }
            }
        },
        "ErrorReason": {
            "type": "object",
            "required": [
                "domain",
                "message",
                "reason"
            ],
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "The overall scope of the error message."
                },
                "message": {
                    "type": "string",
                    "description": "The detailed error message."
                },
                "reason": {
                    "type": "string",
                    "description": "The error reason (error key)."
                }
            }
        },
        "DeputyAccount": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email associated with the deputy account."
                },
                "firstName": {
                    "type": "string",
                    "description": "The first name of the person with access to the parent account."
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the person with access to the parent account."
                },
                "locale": {
                    "type": "string",
                    "description": "The preferred language of the associated account. ISO 639 alpha-2 or alpha-3 language code. If not configured the value from the parent account will be set."
                },
                "middleName": {
                    "type": "string",
                    "description": "The middle name of the person with access to the parent account."
                },
                "prefix": {
                    "type": "string",
                    "description": "The name prefix."
                },
                "role": {
                    "type": "string",
                    "description": "The role of the user that logs in with associated email.",
                    "default": "DEPUTY_STANDARD",
                    "enum": [
                        "DEPUTY_STANDARD",
                        "DEPUTY_SELLER"
                    ]
                },
                "suffix": {
                    "type": "string",
                    "description": "The name suffix."
                }
            },
            "description": "The definition of the associated email to the main account. The deputy accounts are available only for company accounts."
        },
        "DeputyAccountCollection": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Deputy account collection wrapper.",
                    "items": {
                        "$ref": "#/definitions/DeputyAccount"
                    }
                }
            }
        },
        "Image": {
            "type": "object",
            "required": [
                "storageName"
            ],
            "properties": {
                "servingUrl": {
                    "type": "string",
                    "description": "The full URL of the image served from the content delivery network (CDN). Provided by the service once an image ('storageName') has been uploaded."
                },
                "storageName": {
                    "type": "string",
                    "description": "The full path to the image. It's an identification in the underlying storage."
                }
            },
            "description": "Image details."
        },
        "InvoicingConfig": {
            "type": "object",
            "properties": {
                "billingAddress": {
                    "description": "The billing address details. The address is being ignored until property “hasBillingAddress” is set to true.",
                    "$ref": "#/definitions/InvoicingConfigBillingAddress"
                },
                "billingContact": {
                    "description": "The contact person related to billing. It might be presented at invoice or in email communication related to billing.",
                    "$ref": "#/definitions/InvoicingConfigBillingContact"
                },
                "currency": {
                    "type": "string",
                    "description": "The currency code (alphabetic code) based on the ISO 4217. If not set, the country default will be set."
                },
                "finalText": {
                    "type": "string",
                    "description": "A default final text to be placed at invoice usually at the bottom. Use this to communicate a message to the invoice recipient."
                },
                "hasBillingAddress": {
                    "type": "boolean",
                    "description": "If true, the billing address is not same as the company address and must be provided.",
                    "default": false
                },
                "introductoryText": {
                    "type": "string",
                    "description": "A default introductory text to be placed at invoice usually at top of the billing items. Use this to communicate a message to the invoice recipient."
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time of the last modification of invoicing configuration values. Populated by the service."
                },
                "numberOfDays": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The default value of number of days for calculation of the invoice due date.",
                    "default": 14
                },
                "stamp": {
                    "description": "An optional image used to be placed at invoice as a stamp or sign.",
                    "$ref": "#/definitions/Image"
                }
            },
            "description": "The set of account default invoicing rules. These values might be overridden."
        },
        "InvoicingConfigBillingAddress": {
            "type": "object",
            "properties": {
                "businessName": {
                    "type": "string",
                    "description": "The billing address business name."
                },
                "city": {
                    "type": "string",
                    "description": "The billing address city."
                },
                "country": {
                    "type": "string",
                    "description": "The billing address ISO 3166 alpha-2 country code. It's case insensitive."
                },
                "latitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The billing address latitude geographic coordinate, generated by the service."
                },
                "longitude": {
                    "type": "number",
                    "format": "double",
                    "description": "The billing address longitude geographic coordinate, generated by the service."
                },
                "postcode": {
                    "type": "string",
                    "description": "The billing address postal code."
                },
                "street": {
                    "type": "string",
                    "description": "The billing address street and street number."
                }
            }
        },
        "InvoicingConfigBillingContact": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The billing contact email."
                },
                "firstName": {
                    "type": "string",
                    "description": "The billing contact, first name."
                },
                "lastName": {
                    "type": "string",
                    "description": "The billing contact, last name."
                },
                "middleName": {
                    "type": "string",
                    "description": "The billing contact, middle name."
                },
                "phone": {
                    "type": "string",
                    "description": "The billing contact, phone number."
                },
                "prefix": {
                    "type": "string",
                    "description": "The billing contact, name prefix."
                },
                "suffix": {
                    "type": "string",
                    "description": "The billing contact, name suffix."
                }
            }
        },
        "LegalForm": {
            "type": "object",
            "required": [
                "code",
                "label",
                "locale"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The ISO 3166 alpha-2 country code."
                },
                "label": {
                    "type": "string",
                    "description": "The codebook value, legal form short name."
                },
                "locale": {
                    "type": "string",
                    "description": "The label language. ISO 639 alpha-2 or alpha-3 language code."
                },
                "version": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The codebook item version."
                }
            },
            "description": "The company legal form code-book definition."
        },
        "LegalFormCollection": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "description": "Legal form collection wrapper.",
                    "items": {
                        "$ref": "#/definitions/LegalForm"
                    }
                }
            }
        },
        "NewsletterResponse": {
            "type": "object",
            "required": [
                "successful"
            ],
            "properties": {
                "successful": {
                    "type": "boolean",
                    "description": "True if requested contact has matched the security code and request has been processed (subscribed / unsubscribed to / from the newsletter). If false, contact with requested email has been found and verification email has been sent to that contact email to let user verify newsletter subscription.\n\nFalse will be returned also in the case if processing was ignored because of old non null modification date.",
                    "default": false
                }
            }
        },
        "NewsletterSubscription": {
            "type": "object",
            "required": [
                "subscribe"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "description": "The security code originally generated by the service."
                },
                "modificationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The newsletter subscription modification date and time. A client specified time when the request has been originated."
                },
                "subscribe": {
                    "type": "boolean",
                    "description": "The boolean indication whether the contact will be subscribed or unsubscribed from the newsletter.",
                    "default": false
                }
            },
            "description": "If security code is missing in the subscription request, a verification link (incl. security code) will be sent to the contact email to validate newsletter subscription. Until validated the email will be added as a new contact however unsubscribed from the newsletter. Generated security code will be kept and associated with contact email.\n\nIf modification date is being provided the subscription request will be accepted only if this modification date is after the time kept by the service (last wins). Useful if requests are processed asynchronously. If not provided, the subscription requests will be processed in order as they comes."
        },
        "Uri": {
            "type": "object",
            "required": [
                "uri"
            ],
            "properties": {
                "uri": {
                    "type": "string",
                    "description": "The path of a domain URI. An optional slash “/” prefix will be ignored."
                }
            },
            "description": "The domain resource URI wrapper."
        }
    }
}